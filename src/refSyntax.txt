program     :   (function|globdecl)* EOF
function    :   type|Void Identifier LP parameters RP codeblock     FUNCTION_DEFINITION
            |   type|Void Identifier LP parameters RP Semicolon     FUNCTION_DECLARATION
globdecl    :   type Identifier (LB Value RB)+ Semicolon            GLOBDECL_ARRAY
            |   type Identifier Assign Value Semicolon              GLOBDECL_INIT
            |   type Identifier Semicolon                           GLOBDECL_SIMPLE
parameters  :   (type Identifier (Comma type Identifier)*)?
codeblock   :   LBrace (blockitem)* RBrace
blockitem   :   statement                                           BLOCKITEM_STATEMENT
            |   declaration Semicolon                               BLOCKITEM_DECLARATION
statement   :   expression Semicolon                                STATEMENT_EXPRESSION
            |   Return expression Semicolon                         STATEMENT_RETURN
            |   Semicolon                                           STATEMENT_EMPTY
            |   codeblock                                           STATEMENT_CODEBLOCK
            |   if                                                  STATEMENT_IF
            |   for                                                 STATEMENT_FOR
            |   while                                               STATEMENT_WHILE
            |   Break Semicolon                                     STATEMENT_BREAK
            |   Continue Semicolon                                  STATEMENT_CONTINUE
for         :   For LP expression? SC expr? SC expr? RP statement   FOR_EXPRESSION
            |   For LP declaration SC expr? SC expr? RP statement   FOR_DECLARATION
while       :   While LP expression RP statement                    WHILE_STANDARD
            |   Do statement While LP expression RP SC              WHILE_DO
if          :   If LP expression RP statement                       IF_SIMPLE
            :   If LP expression RP statement Else statement        IF_ELSE
declaration :   type Identifier                                     DECLARATION_SIMPLE
            |   type Identifier Assign expression                   DECLARATION_INIT
            |   type Identifier (LB Value RB)+                      DECLARATION_ARRAY
type        :   Integer | Char | Bool                               TYPE_BASIC
            |   type Asterisk                                       TYPE_POINTER
exprlist    :   (expression (, expression)*)?
expression  :   assignment
assignment  :   conditional                                         ASSIGNMENT_VALUE
            |   unary Assign expression                             ASSIGNMENT_ASSIGN
conditional :   logical_or                                          CONDITIONAL_LEAF
            |   logical_or Question expression Colon conditional    CONDITIONAL_INNER
logical_or  :   logical_and                                         LOR_LEAF
            |   logical_or Or logical_and                           LOR_INNER
logical_and :   equality                                            LAND_LEAF   
            |   logical_and And equality                            LAND_INNER
equality    :   relational                                          EQUALITY_LEAF
            |   equality (Equal|NotEqual) relational                EQUALITY_INNER
relational  :   additive                                            RELATIONAL_LEAF
            |   relational (G|L|GE|LE) additive                     RELATIONAL_INNER
additive    :   multiplicative                                      ADDITIVE_LEAF
            |   multiplicative (Plus|Minus) additive                ADDITIVE_INNER
multiplica  :   unary                                               MULTI_LEAF
            |   multiplicative (Asterisk|Percent|LSlash) uanry      MULTI_INNER
unary       :   postfix                                             UNARY_POSTFIX
            |   (Exclamation|Tilde|Minus|Asterisk|And) unary        UNARY_OPERATOR
            |   LParen type RParen unary                            UNARY_CAST
postfix     :   primary                                             POSTFIX_PRIMARY
            |   Identifier LParen exprlist RParen                   POSTFIX_CALL
            |   postfix LBracket expression RBracket                POSTFIX_ARRAY
primary     :   value                                               PRIMARY_VALUE
            |   LParen expression RParen                            PRIMARY_PAREN
            |   Identifier                                          PRIMARY_IDENTIFIER
value       :   CharValue | IntValue | False | True